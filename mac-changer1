#!/bin/bash

# =============================================
# MAC Changer For Linux
# By: SharpMalware
# =============================================

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Check dependencies
check_dependencies() {
    local missing=()
    local packages=("iproute2" "openssl")
    
    for pkg in "${packages[@]}"; do
        if ! dpkg -l | grep -q "^ii  $pkg "; then
            missing+=("$pkg")
        fi
    done

    if [ ${#missing[@]} -ne 0 ]; then
        echo -e "${RED}Missing packages: ${missing[*]}${NC}"
        echo -e "${YELLOW}Installing dependencies...${NC}"
        sudo apt-get update && sudo apt-get install -y "${missing[@]}"
    fi
}

# Validate MAC address format
validate_mac() {
    local mac=$1
    if [[ "$mac" =~ ^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Generate random MAC
generate_random_mac() {
    local vendors=("00:0c:29" "00:50:56" "00:1c:42" "00:1d:0f" "00:24:1d")
    local vendor=${vendors[$RANDOM % ${#vendors[@]}]}
    local random_part=$(openssl rand -hex 3 | sed 's/\(..\)/\1:/g; s/.$//')
    echo "$vendor:$random_part"
}

# Change MAC address
change_mac() {
    local interface=$1
    local new_mac=$2
    
    # Get current MAC
    local current_mac=$(ip link show $interface | awk '/ether/ {print $2}')
    
    
    echo -ne "${WHITE}Changing MAC Address .${NC}"
    sleep 0.3
    #echo -ne " ${NC}"
    sleep 0.3
    #echo -ne " ${NC}"
    sleep 0.3
    echo -ne "\r${WHITE}Changing MAC Address ..${NC}"
    sleep 0.3
    #echo -ne " ${NC}"
    sleep 0.3
    #echo -ne " ${NC}"
    sleep 0.3
    echo -ne "\r${WHITE}Changing MAC Address ...${NC}"
    sleep 0.3
    #echo -ne " ${NC}"
    sleep 0.3
    echo -ne "\r${WHITE}Changing MAC Address .${NC}"
    sleep 0.3
    echo -e "\r" 
    
    # Change MAC
    sudo ip link set dev $interface down
    sudo ip link set dev $interface address $new_mac
    sudo ip link set dev $interface up
    
    # Verify change
    local updated_mac=$(ip link show $interface | awk '/ether/ {print $2}')
    
    if [ "$updated_mac" == "$new_mac" ]; then
        clear
        echo -e "${GREEN}MAC address changed successfully!${NC}"
        echo -e "${YELLOW}Old MAC: $current_mac${NC}"
        echo -e "${YELLOW}New MAC: $updated_mac${NC}"
    else
        echo -e "${RED}Failed to change MAC address!${NC}"
    fi
}

random_mac_loop() {
    clear
    read -p "Enter time interval (5-60 seconds) Recommended 15: " interval
    
   
    if [[ ! "$interval" =~ ^[0-9]+$ ]] || [ "$interval" -lt 5 ] || [ "$interval" -gt 60 ]; then
        echo -e "${RED}Error: Please enter a number between 5 and 60"
        sleep 2
        return
    fi
    
    echo -e "\n${GREEN}[+] Starting automatic MAC change every $interval seconds (Press Ctrl+C to stop)${NC}"
    echo ""
    echo ""
    
    
    while true; do
        new_mac=$(generate_random_mac)
        current_mac=$(ip link show $selected_interface | awk '/ether/ {print $2}')
        
        sudo ip link set dev $selected_interface down
        sudo ip link set dev $selected_interface address $new_mac
        sudo ip link set dev $selected_interface up
        
        updated_mac=$(ip link show $selected_interface | awk '/ether/ {print $2}')
        
        if [ "$updated_mac" == "$new_mac" ]; then
            echo -e "${GREEN}[+] Successfully Changed Mac To: $updated_mac${NC}"
            echo ""
        else
            echo ""
            echo -e "${RED}[-] Failed to change MAC address!${NC}"
            echo ""
        fi
        
        sleep $interval
    done
}

# Main menu
main_menu() {
    clear
    echo -e "${WHITE}==================================${NC}"
    echo -e "${WHITE} MAC Changer For Linux${NC}"
    echo -e "${WHITE} By: SharpMalware${NC}"
    echo -e "${WHITE}==================================${NC}"
    echo ""
    
    # Get available interfaces
    local interfaces=($(ip -o link show | awk -F': ' '{print $2}' | grep -v lo))
    
    # Show interface selection
    echo -e "${WHITE}Available network interfaces:${NC}"
    for i in "${!interfaces[@]}"; do
        echo "$(($i+1)). ${interfaces[$i]}"
    done
    echo ""
    
    # Get user selection
    read -p "Select interface (1-${#interfaces[@]}): " choice
    
    # Validate selection
    if [[ ! "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#interfaces[@]}" ]; then
        echo -e "${RED}Invalid selection!${NC}"
        sleep 2
        main_menu
        return
    fi
    
    local selected_interface="${interfaces[$(($choice-1))]}"
    clear
    # Show action menu
    while true; do
        clear
        echo ""
        echo -e "${WHITE}Selected interface: $selected_interface${NC}"
        echo -e "${WHITE}Current MAC: $(ip link show $selected_interface | awk '/ether/ {print $2}')${NC}"
        echo ""
        echo "1. Change to specific MAC (hmac)"
        echo "2. Change to random MAC (rmac)"
        echo "3. Random MAC Every Specific time (emac)"
        echo "4. Return to main menu"
        echo "5. Exit"
        echo ""
        
        read -p "Select option: " option
        
        case $option in
            1|hmac)
                clear
                while true; do
                    echo ""
                    echo -e "${WHITE}Enter new MAC address (format: XX:XX:XX:XX:XX:XX)${NC}"
                    echo -e "${WHITE}or type 'return' to go back${NC}"
                    echo ""
                    
                    read -p "New MAC: " new_mac
                    
                    if [ "$new_mac" == "return" ]; then
                        break
                    fi
                    
                    if validate_mac "$new_mac"; then
                        change_mac "$selected_interface" "$new_mac"
                        read -p "Press enter to continue..."
                        break
                    else
                        echo -e "${RED}Invalid MAC address format! Please try again.${NC}"
                    fi
                done
                ;;
            2|rmac)
                clear
                local random_mac=$(generate_random_mac)
                echo -e "${WHITE}Generated random MAC: $random_mac${NC}"
                change_mac "$selected_interface" "$random_mac"
                read -p "Press enter to continue..."
                ;;
            3|emac)
                clear
                random_mac_loop
                ;;
            4|return)
                clear
                main_menu
                return
                ;;
            5|exit)
                clear
                echo -e "${GREEN}Goodbye!${NC}"
                sleep 0.8
                clear
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Check root privileges
if [ "$(id -u)" != "0" ]; then
    echo -e "${RED}This script must be run as root"
    exit 1
fi

# Check dependencies
check_dependencies

# Start the application
main_menu
